#!@PERL@ -w
# @configure_input@
#

use strict;

sub getattr($$);
sub fixname($);


my @lines = (<>);
chomp(@lines);
my $file = "@lines";

my @particlecmds;
my @decaycmds;
my %pnames;
my %allnames;
my %colours;
my %constm = (  1 => 0.325,
	       -1 => 0.325,
		2 => 0.325,
	       -2 => 0.325,
		3 => 0.5,
	       -3 => 0.5,
		4 => 1.6,
	       -4 => 1.6,
		5 => 5.0,
	       -5 => 5.0,
	       21 => 0.0);

while ( $file =~ /<particle(.*?)>(.*?)<\/particle>/g ) {
  my $tags = $1;
  my $content = $2;
  my $id = getattr($tags, "id");
  next if !$id;
  next if $id == 82 || $id == 81;
  my $name;
  my $aname;
  my $spin = getattr($tags, "spinType");
  my $charge = getattr($tags, "chargeType");
  my $colour = getattr($tags, "colType");
  $colour = 0 if !$colour;
  if ( $colour == 1 ) {
    $colour = 3;
  } elsif ( $colour == -1 ) {
    $colour = -3;
  } elsif ( $colour == 2 ) {
    $colour = 8;
  }
  my $mass = getattr($tags, "m0");
  my $width = getattr($tags, "mWidth");
  $width = 0 if !$width;
  my $tau = getattr($tags, "tau0");
  $tau = 0 if !$tau;
  my $minmass = getattr($tags, "mMin");
  my $maxmass = getattr($tags, "mMax");
  my $stable = 1;
  my $widthcut = -1.0;
  $name = fixname(getattr($tags, "name"));
  $aname = fixname(getattr($tags, "antiName"));
  $name .= "#" if defined($allnames{$name});
  $aname .= "#" if $aname && defined($allnames{$aname});
  $allnames{$name} = 1;
  $allnames{$aname} = 1 if $aname;

  while ( $content =~ /<channel(.*?)\/>/g ) {
    $stable = 0;
    push @decaycmds, "$id $1";
  }

  my $pclass = "ThePEG::ParticleData";
  my $cmass = "";
  if ( abs($id) < 6 || $id == 21 ) {
      $pclass = "ThePEG::ConstituentParticleData";
      $cmass = " $constm{$id}";
  } elsif ( $id > 1000 && $id < 10000 && ($id/10)%10 == 0 ) {
      my $id1 = ($id/1000)%10;
      my $id2 = ($id/100)%10;
      if ( abs($id1) < 6 && abs($id2) < 6 ) {
	  $pclass = "ThePEG::ConstituentParticleData";
	  $constm{$id} = $constm{$id1} + $constm{$id2};
	  $cmass = " $constm{$id}";
      }
  }
  if ( abs($id) == 11 || abs($id) == 13 || $id == 22 || $id == 111 ||
       abs($id) == 2112 || abs($id) == 2212 ) {
      $pclass = "ThePEG::BeamParticleData"
  }
  
  $pnames{$id} = $name;
  $colours{$id} = $colour;
  push @particlecmds, "create $pclass $name";
  push @particlecmds, "setup $name $id $name $mass $width "
    . "$widthcut $tau $charge $colour $spin $stable$cmass";
  push @particlecmds, "newdef $name:WidthCut " .
    ($maxmass - $mass)
      if $maxmass && $maxmass - $mass > 0 && $minmass && $mass - $minmass > 0 &&
	$maxmass - $mass > $mass - $minmass;
  push @particlecmds, "newdef $name:WidthCut " .
    ($mass - $minmass)
      if $maxmass && $maxmass - $mass > 0 && $minmass && $mass - $minmass > 0 &&
	$maxmass - $mass <= $mass - $minmass;
  push @particlecmds, "newdef $name:WidthLoCut " .
    ($mass - $minmass) if $minmass && $mass - $minmass > 0;
  push @particlecmds, "newdef $name:WidthUpCut " .
    ($maxmass - $mass) if $maxmass && $maxmass - $mass > 0;
  if ( $aname ) {
    $id = 0 - $id;
    $charge = 0 - $charge;
    $colour = 0 - $colour if $colour == 3 || $colour == -3;
    $pnames{$id} = $aname;
    $colours{$id} = $colour;
    push @particlecmds, "create $pclass $aname";
    push @particlecmds, "setup $aname $id $aname $mass "
      . "$width $widthcut $tau $charge $colour $spin $stable$cmass";
    push @particlecmds, "newdef $aname:WidthCut " .
      ($maxmass - $mass)
	if $maxmass && $maxmass - $mass > 0 && $minmass && $mass - $minmass > 0
	  && $maxmass - $mass > $mass - $minmass;
    push @particlecmds, "newdef $aname:WidthCut " .
      ($mass - $minmass)
	if $maxmass && $maxmass - $mass > 0 && $minmass && $mass - $minmass > 0
	  && $maxmass - $mass <= $mass - $minmass;
    push @particlecmds, "newdef $aname:WidthLoCut " .
      ($mass - $minmass) if $minmass && $mass - $minmass > 0;
    push @particlecmds, "newdef $aname:WidthUpCut " .
      ($maxmass - $mass) if $maxmass && $maxmass - $mass > 0;
    push @particlecmds,
      "makeanti $name $aname";
  }
}

foreach  my $cmd (@particlecmds) {
  print "$cmd\n";
}

foreach my $dec ( @decaycmds ) {
  my @words = split ' ',$dec;
  my $id = $words[0];
  my $onmode = getattr($dec, "onMode");
  my $memode = getattr($dec, "meMode");
  if ( $memode ) {
    $memode = "/TheP8I/Decayers/DecayMECode$memode";
  } else {
    $memode = "/TheP8I/Decayers/FlatDecayer";
  }
  my $brat = getattr($dec, "bRatio");
  my @products = split(' ', getattr($dec, "products"));
  my $totcol = 0;
  my $children;

  foreach my $p ( @products ) {
    if ( $p == 81 ) {
      if ( ($id/100)%10 == 0 ) {
	$p = (-$id/10)%10;
      }
      elsif ( ($id/100)%10 >= ($id/10)%10 ) {
	$p = 100*(($id/10)%100) + 3;
      }
      else {
	$p =  1000*(($id/10)%10) + 100*(($id/100)%10) + 1;
      }
    }
    my $sep = ",";
    if ( $totcol ) {
      if (defined($colours{$p}) && $colours{$p} + $totcol == 0 ) {
	$sep = "=";
      } elsif ( !defined($colours{$p}) ) {
        print STDERR "HallÅÅÅ $p\n";
      }
      $totcol = 0;
    } else {
      $totcol = $colours{$p} if defined($colours{$p}) && $colours{$p} != 8;
    }
    if ( $p == 83 || $p == -83 ) {
      $memode .= "G";
    }
    if ( $p == 82 || $p == 83 ) {
      $p = "?MatchLightQuark";
    }
    elsif ( $p == -82 || $p == -83 ) {
      $p = "?MatchLightAntiQuark";
    }
    else {
      $p = $pnames{$p};
    }
    if ( !$children ) {
      $children ="$p";
    } else {
      $children .= "$sep$p";
    }
  }
  print "decaymode $pnames{$id}->$children; $brat 1 $memode\n";
}



sub getattr($$) {
  my $string = $_[0];
  my $tag = $_[1];
  my $ret;
  if ( $string =~ /$tag\w*=\w*"(.*?)"/ ) {
    $ret = $1;
  }
  return $ret;
}


sub fixname($) {
  my $name = $_[0];
  if ( $name ) {
    $name =~ tr/[]/{}/;
    $name =~ s/J\/psi/Jpsi/g;
    $name =~ s/ /_/g;
  }
  return $name;
}
