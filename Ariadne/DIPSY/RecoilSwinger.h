// -*- C++ -*-
#ifndef DIPSY_RecoilSwinger_H
#define DIPSY_RecoilSwinger_H
//
// This is the declaration of the RecoilSwinger class.
//

#include "Ariadne/DIPSY/Swinger.h"

namespace DIPSY {

using namespace ThePEG;

/**
 * Here is the documentation of the RecoilSwinger class.
 *
 * @see \ref RecoilSwingerInterfaces "The interfaces"
 * defined for RecoilSwinger.
 */
class RecoilSwinger: public Swinger {

public:

  /** @name Standard constructors and destructors. */
  //@{
  /**
   * The default constructor.
   */
  RecoilSwinger();

  /**
   * The destructor.
   */
  virtual ~RecoilSwinger();
  //@}

public:

  /** @name Virtual functions which may be overridden by sub-classes. */
  //@{
  /**
   * Generate a swing for the given \a dipole in the given rapidity
   * interval [\a miny,\a maxy]. If \a force is true, always generate
   * a swing, otherwise only check if a swing is possible with dipoles
   * which are new or has changed.
   */
  virtual void generate(Dipole & dipole,
			double miny, double maxy, bool force) const;

  /**
   * Perform a recombination previously generated by generateRec().
   */
  virtual void recombine(Dipole & dipole) const;
  //@}

public:

  /**
   * Exchanges a gluon, resulting in a colour recombination and a recoil.
   */
  void exchange(Dipole & dipole) const;

  /**
   * The probability per rapidity of a gluon exchange. kinematics veto not included.
   */
  double exchangeAmp(const pair<tPartonPtr, tPartonPtr>,
		     const pair<tPartonPtr, tPartonPtr>) const;

  /**
   * If a gluon exchange between the two dipoles is forbidden.
   */
  bool kinematicsVeto(const pair<tPartonPtr, tPartonPtr>,
		      const pair<tPartonPtr, tPartonPtr>) const;

  /**
   * Generates a gluon exchange in the given rapidity intervall.
   */
  void generateExchange(Dipole & dipole, double miny, double maxy, bool force) const;

public:

  /** @name Functions used by the persistent I/O system. */
  //@{
  /**
   * Function used to write out object persistently.
   * @param os the persistent output stream written to.
   */
  void persistentOutput(PersistentOStream & os) const;

  /**
   * Function used to read in object persistently.
   * @param is the persistent input stream read from.
   * @param version the version number of the object when written.
   */
  void persistentInput(PersistentIStream & is, int version);
  //@}

  /**
   * The standard Init function used to initialize the interfaces.
   * Called exactly once for each class by the class description system
   * before the main function starts or
   * when this class is dynamically loaded.
   */
  static void Init();

protected:

  /** @name Clone Methods. */
  //@{
  /**
   * Make a simple clone of this object.
   * @return a pointer to the new object.
   */
  virtual IBPtr clone() const;

  /** Make a clone of this object, possibly modifying the cloned object
   * to make it sane.
   * @return a pointer to the new object.
   */
  virtual IBPtr fullclone() const;
  //@}


// If needed, insert declarations of virtual function defined in the
// InterfacedBase class here (using ThePEG-interfaced-decl in Emacs).


private:

  /**
   * The assignment operator is private and must never be called.
   * In fact, it should not even be implemented.
   */
  RecoilSwinger & operator=(const RecoilSwinger &);

};

}

#endif /* DIPSY_RecoilSwinger_H */
