// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the DipoleState class.
//

namespace DIPSY {

inline DipoleState::DipoleState()
  : thePlus(ZERO), theMinus(ZERO), theMinusDeficit(ZERO), theWeight(1.0),
    doTakeHistory(false), theYmax(0.0), theCollidingEnergy(ZERO)  {}

inline DipoleState::DipoleState(const DipoleEventHandler & h, WFInfoPtr wf)
  : thePlus(ZERO), theMinus(ZERO), theMinusDeficit(ZERO), theHandler(&h),
    theWFInfo(wf), theWeight(1.0), doTakeHistory(false), theYmax(0.0),
    theCollidingEnergy(ZERO) {}

inline const DipoleEventHandler & DipoleState::handler() const {
  return *theHandler;
}

//added by CF to access from emitter
inline void DipoleState::handler(tcDipoleEventHandlerPtr handler) {
  theHandler = handler;
}

inline tDipolePtr DipoleState::createDipole() {
  DipolePtr d = new_ptr(Dipole());
  d->theDipoleState = this;
  allDipoles.insert(d);
  return d;
}

template <typename OutputIterator>
inline void DipoleState::extract(OutputIterator it) const {
  for ( int i = 0, N = initialDipoles().size(); i < N; ++i )
    initialDipoles()[i]->extract(it);
}

//to access the dipoles of a cetain colour. /CF
inline const vector<tDipolePtr> &
DipoleState::swingCandidates(int c, bool touched) const {
  static vector<tDipolePtr> dummy;
  if ( !touched ) return theSwingCandidates[c];
  if ( c >= int(theTouchedSwingCandidates.size()) ) return dummy;
  return theTouchedSwingCandidates[c];
}

inline const vector<DipolePtr> & DipoleState::initialDipoles() const {
  return theInitialDipoles;
}

inline void DipoleState::addDipole(Dipole & dip) {
  theInitialDipoles.push_back(& dip);
}

inline double DipoleState::weight() const {
  return theWeight;
}

inline void DipoleState::weight(double x) {
  theWeight = x;
}

inline void DipoleState::takeHistory(bool b) {
  doTakeHistory = b;
}

inline void DipoleState::save() {
  if ( doTakeHistory )
    theHistory.push_back( clone() );
}

inline WFInfoPtr DipoleState::WFInfo() const {
  return theWFInfo;
}

inline const WaveFunction & DipoleState::wf() const {
  return WFInfo()->wf();
}

inline void DipoleState::WFInfo(WFInfoPtr x) {
  theWFInfo = x;
}

}
