// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the Parton class.
//

namespace DIPSY {

inline Parton::Parton()
  : thePosition(Point()), thePlus(0.0*GeV), theOriginalY(0.0),
    thePT(TransverseMomentum()),
    theValencePT(TransverseMomentum()),theValencePlus(ZERO),
    theMinus(0*GeV), theY(0), isRightMoving(true), theFlavour(ParticleID::g),
    theParents(tPartonPair()), theDipoles(tDipolePair()), hasInteracted(false),
    isOnShell(false), isValence(false), theMass(-1*GeV) {}

inline Parton::Parton(const Parton & x)
  : thePosition(x.thePosition), thePlus(x.thePlus),theOriginalY(x.theOriginalY), 
    thePT(x.thePT),
    theValencePT(x.theValencePT),theValencePlus(x.theValencePlus),
    theMinus(x.theMinus), theY(x.theY), isRightMoving(x.isRightMoving),
    theFlavour(x.theFlavour),theParents(x.theParents),
    theChildren(x.theChildren), theDipoles(x.theDipoles),
    hasInteracted(x.hasInteracted), isOrdered(x.isOrdered),
    isOnShell(x.isOnShell), isValence(x.isValence), theMass(x.theMass) {}

inline const Parton::Point & Parton::position() const {
  return thePosition;
}

inline void Parton::position(const Point & x) {
  thePosition = x;
}

inline Energy Parton::plus() const {
  return thePlus;
}

inline void Parton::plus(Energy x) {
  thePlus = x;
}

inline TransverseMomentum Parton::pT() const {
  return thePT;
}

inline void Parton::pT(TransverseMomentum x) {
  thePT = x;
}

inline const double Parton::oY() const {
  return theOriginalY;
}

inline void Parton::oY(double y) {
  theOriginalY = y;
}

inline TransverseMomentum Parton::valencePT() const {
  if (isValence)
    return theValencePT;
  return TransverseMomentum();
}

inline void Parton::valencePT(TransverseMomentum x) {
  isValence = true;
  theValencePT = x;
}

inline Energy Parton::valencePlus() const {
  if (isValence)
    return theValencePlus;
  return ZERO;
}

inline void Parton::valencePlus(Energy E) {
  theValencePlus = E;
}

inline Energy Parton::minus() const {
  return theMinus;
}

inline void Parton::minus(Energy x) {
  theMinus = x;
}

inline double Parton::y() const {
  return theY;
}

inline void Parton::y(double x) {
  theY = x;
}

inline Parton::tPartonPair Parton::parents() const {
  return theParents;
}

inline void Parton::parents(tPartonPair x) {
  theParents = x;
}

inline Parton::tDipolePair Parton::dipoles() const {
  return theDipoles;
}

inline void Parton::dipoles(tDipolePair x) {
  theDipoles = x;
}

inline bool Parton::rightMoving() const {
  return isRightMoving;
}

inline void Parton::rightMoving(bool rM) {
  isRightMoving = rM;
}

inline bool Parton::interacted() const {
  return hasInteracted;
}

inline bool Parton::ordered() const {
  return isOrdered;
}

inline void Parton::ordered(bool b) {
  isOrdered = b;
}

inline bool Parton::onShell() const {
  return isOnShell;
}

inline void Parton::onShell(bool b) {
  isOnShell = b;
}

inline bool Parton::valence() const {
  return isValence;
}

inline void Parton::valence(bool b) {
  isValence = b;
}

inline InvEnergy2 Parton::dist2(const Parton & p) const {
  return (position() - p.position()).pt2();
}

inline long Parton::flavour() const {
  return theFlavour;
}

inline void Parton::flavour(long x) {
  theFlavour = (x == 0? ParticleID::g: x);
}

}
