// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the DipoleState class.
//

namespace Ariadne {

inline DipoleState::DipoleState(tHandlerPtr hdl)
  : CascadeBase(hdl), thePType(unknown), theNe(0) {
}

inline DipoleState::DipoleState(const DipoleState & x)
  : CascadeBase(x), emitters(x.emitters),
    strings(x.strings), objects(x.objects), theSelected(x.theSelected),
    theRemnants(x.theRemnants), theHardSubSys(x.theHardSubSys),
    thePType(x.thePType), theNe(x.theNe), theParticles(x.theParticles),
    theScatteredLeptons(x.theScatteredLeptons),
    theScatteredQuarks(x.theScatteredQuarks) {}

inline tEmiPtr DipoleState::selected() const {
  return theSelected;
}

inline void DipoleState::selected(const tEmiPtr & x) {
  theSelected = x;
}

inline const DipoleState::tRemPair & DipoleState::remnants() const {
  return theRemnants;
}

inline void DipoleState::remnants(const tRemPair & x) {
  theRemnants = x;
}

inline const HardSubSys & DipoleState::hardSubSys() const {
  return theHardSubSys;
}

inline HardSubSys & DipoleState::hardSubSys() {
  return theHardSubSys;
}

inline DipoleState::ProcessType DipoleState::pType() const {
  return thePType;
}

inline int DipoleState::ne() const {
  return theNe;
}

inline tPPair DipoleState::particles() const {
  return theParticles;
}

inline tPPair DipoleState::scatteredLeptons() const {
  return theScatteredLeptons;
}

inline tPPair DipoleState::scatteredQuarks() const {
  return theScatteredQuarks;
}

inline void DipoleState::fillReferences(CloneSet &) const {}

template <typename Class>
inline typename Ptr<Class>::pointer DipoleState::create() {
  typedef typename Ptr<Class>::pointer PTR;
  PTR obj = ptr_new<PTR>();
  objects.insert(objects.end(), obj);
  obj->handler(handler());
  obj->state(this);
  if ( dynamic_ptr_cast<tEmiPtr>(obj) )
    emitters.insert(emitters.end(), dynamic_ptr_cast<tEmiPtr>(obj));
  if ( dynamic_ptr_cast<tStrPtr>(obj) )
    strings.insert(strings.end(), dynamic_ptr_cast<tStrPtr>(obj));
  return obj;
}

inline Energy2 DipoleState::constructedPT2() const{
  return theSelectedHistory ? theSelectedHistory->selected()->lastPT2():
    sTot() / 4.0;
}

}

