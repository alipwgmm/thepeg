// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the CascadeHandler class.
//

namespace Ariadne {

inline IBPtr CascadeHandler::clone() const {
  return new_ptr(*this);
}

inline IBPtr CascadeHandler::fullclone() const {
  return new_ptr(*this);
}

inline CascadeHandler::RunningOption CascadeHandler::runningCoupling() const {
  return theRunningCoupling;
}

inline double CascadeHandler::alpha0() const {
  return theAlpha0;
}

inline double CascadeHandler::alphaEM0() const {
  return theAlphaEM0;
}

inline Energy CascadeHandler::lambdaQCD() const {
  return theLambdaQCD;
}

inline Ptr<AlphaSBase>::const_pointer CascadeHandler::internalAlphaS() const {
  return theInternalAlphaS;
}

inline Energy CascadeHandler::pTCut() const {
  return thePTCut;
}

inline Energy CascadeHandler::pTCutEM() const {
  return thePTCutEM;
}

inline int CascadeHandler::nCol() const {
  return theNCol;
}

inline int CascadeHandler::nFlav() const {
  return theNFlav;
}

inline bool CascadeHandler::photonEmissions() const {
  return thePhotonEmissions;
}

inline int CascadeHandler::maxEmissions() const {
  return theMaxEmissions;
}

inline Energy CascadeHandler::softMu() const {
  return theSoftMu;
}

inline double CascadeHandler::softAlpha() const {
  return theSoftAlpha;
}

inline double CascadeHandler::hardAlpha() const {
  return theHardAlpha >= 0? theHardAlpha: softAlpha();
}

inline double CascadeHandler::beta() const {
  return theBeta;
}

inline const CascadeHandler::MECVector & CascadeHandler::MECorrectors() const {
  return theMECorrectors;
}

inline void CascadeHandler::doupdate() throw(UpdateException) {
  ThePEG::CascadeHandler::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void CascadeHandler::dofinish() {
  ThePEG::CascadeHandler::dofinish();
}

inline void CascadeHandler::doinitrun() {
  ThePEG::CascadeHandler::doinitrun();
}

inline void CascadeHandler::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  ThePEG::CascadeHandler::rebind(trans);
}

inline IVector CascadeHandler::getReferences() {
  IVector ret = ThePEG::CascadeHandler::getReferences();
  // ret.push_back(dummy);
  return ret;
}

}
