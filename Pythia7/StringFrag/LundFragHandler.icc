// -*- C++ -*-

namespace Pythia7 {

//        ***********  Fragmentation Administration   *********** 
inline bool LundFragHandler::enoughE() const {
  return Estatus;
}

inline bool LundFragHandler::inconsistentBreakupRegions() const {
  return( (Oriented::Dir() == Oriented::right)? 
  	  (CurrentSR()->Ibwd() > lastOppEP().SR()->Ibwd()):
  	  (CurrentSR()->Ibwd() < lastOppEP().SR()->Ibwd()) );  
}

inline int LundFragHandler::nSR() const {
  return theCurrentString->nPrimaryStringRegion();
}

//   ***************** Parameter accessors *******************

inline long LundFragHandler::maxLoop() const{
  return MaxLoop;
}

inline void LundFragHandler::maxLoop(long n){
  MaxLoop=n;
}

inline PtGeneratorPtr LundFragHandler::PtGen() const{
  return thePtGen;
}

inline void LundFragHandler::PtGen(PtGeneratorPtr newPtGen){
  thePtGen = newPtGen;
}

inline FlavourGeneratorPtr LundFragHandler::FlavourGen() const {
  return theFlGen;
}

inline void LundFragHandler::FlavourGen(FlavourGeneratorPtr newFlGen) {
 theFlGen = newFlGen;
}

inline void  LundFragHandler::ZGen(ZGeneratorPtr newZGen) {
  theZGen = newZGen;
}

inline ZGeneratorPtr  LundFragHandler::ZGen() const { 
  return theZGen;
}

inline Energy LundFragHandler::Wmin0() const {
  return pWmin0;
}

inline double LundFragHandler::k() const {
  return pK;
}

inline double LundFragHandler::Delta() const {
  return pDelta;
}

inline Energy LundFragHandler::m0() const {
  return pM0;
}

inline InvEnergy4 LundFragHandler::d0() const {
  return pd0;
}

inline double LundFragHandler::SqRatio() const {
  return FlavourGen()->strangeQSup();
}


//   ***************** Generation process accessors *******************

inline const EndPoint& LundFragHandler::lastEP() const {
  return((Oriented::Dir() == Oriented::right)? theRightEP : theLeftEP );
}

inline const EndPoint& LundFragHandler::lastOppEP() const{
  // Provide == for EndPoint ?
  //  return((lastEP() == theRightEP)? theLeftEP: theRightEP );
  return((Oriented::Dir() == Oriented::right)? theLeftEP : theRightEP );
}

inline bool LundFragHandler::AqqbarSystem() const{
  return (theCurrentString->nPrimaryStringRegion() == 1);
}

inline cStringRegionPtr LundFragHandler::CurrentSR() const {
  return CurrentEP.SR();
}

inline double LundFragHandler::CurrentXremf() const {
  return CurrentSR()->Xremf();
}

inline double LundFragHandler::CurrentXremb() const {
  return CurrentSR()->Xremb();
}

// ****************** EndPoint Ref accessors ************************ 

inline EndPoint& LundFragHandler::getLastEP() {
  return((Oriented::Dir() == Oriented::right)? theRightEP : theLeftEP );
}
inline EndPoint& LundFragHandler::getLastOppEP() {
  return((Oriented::Dir() == Oriented::right)? theLeftEP : theRightEP );
}


// ********************** Accessors for Stepping Functions *************

inline double&  LundFragHandler::Xhatfwd(int findex) {
  return (Oriented::Dir() == Oriented::right)? 
    XhatFwdVector[findex-1].first : XhatFwdVector[findex-1].second;
}

inline double&  LundFragHandler::Xhatbwd(int bindex) {
  return (Oriented::Dir() == Oriented::right)? 
    XhatBwdVector[bindex-1].first : XhatBwdVector[bindex-1].second;
}

inline void LundFragHandler::setXhat(double newXhatfwd, double newXhatbwd){

  int fwdIdx = CurrentSR()->Ifwd()-1;
  int bwdIdx = CurrentSR()->Ibwd()-1;

  if (Oriented::Dir() == Oriented::right){
    XhatFwdVector[fwdIdx].first -= newXhatfwd;
    XhatBwdVector[bwdIdx].first = newXhatbwd;
  }else{
    XhatFwdVector[fwdIdx].second -= newXhatfwd;
    XhatBwdVector[bwdIdx].second = newXhatbwd;
  }
}

inline bool LundFragHandler::aSolution() const {
  return GammaM2Solution;
}

//Final Two Hadrons Procedure  
inline cStringRegionPtr LundFragHandler::finalSR() const {
  return thefinalSR;
}

inline  const EndPoint& LundFragHandler::firstEP() const {
  return (finalSR() == CurrentSR())? lastEP() : lastOppEP();
}

inline EndPoint& LundFragHandler::secondEP() {
  return (finalSR() == CurrentSR())? getLastOppEP() : getLastEP();
}

inline Hadron& LundFragHandler::secondH() {
  return (finalSR() == CurrentSR())? lastHadron: newHadron;
}


//  *************** Managemant of produced particles ****************

inline void LundFragHandler::clearBuffer() {
  theBuffer.clear();
}

//  ***************  Standard Interfaced virtual functions *************

inline IBPtr LundFragHandler::clone() const {
  return new_ptr(*this);
}
 
inline IBPtr LundFragHandler::fullclone() const {
  return new_ptr(*this);
}

inline void LundFragHandler::doupdate() throw(UpdateException){}
inline void LundFragHandler::doinit() throw(InitException) {}
inline void LundFragHandler::dofinish() {}

}//End_Pythia7_Namespace




