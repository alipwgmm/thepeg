// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the Hadron class.
//

namespace Pythia7 {

inline Hadron::Hadron()
  : mt2(0.0*GeV2), Xf(0.), Xb(0.), theParticleMass(0.0*GeV) {}

inline Hadron::Hadron(const Hadron & h)
  : theParticle(h.theParticle), Data(h.Data), mt2(h.mt2), Xf(h.Xf), Xb(h.Xb),
    P(h.P), theParticleMass(h.theParticleMass),
    ProductionSide(h.ProductionSide) {}

inline Hadron::~Hadron(){ }

inline Hadron & Hadron::operator=(const Hadron & h) {
  theParticle = h.theParticle;
  Data = h.Data;
  mt2 = h.mt2;
  Xf = h.Xf;
  Xb = h.Xb;
  P = h.P;
  theParticleMass = h.theParticleMass;
  ProductionSide = h.ProductionSide;
  return *this;
}

inline PPtr Hadron::createParticle(){          //Units
  Energy2 delta = abs(P.m2() - m2() );
  if( delta > max( 0.1*GeV2, sqr(0.002*P.e())) )
    throw Veto();

  return(Data->produceParticle(P));
}


inline void Hadron::mT2(const EndPoint& last, const EndPoint& newCreated ){
  mt2 =  sqr(theParticleMass) 
       + sqr(last.Px() + newCreated.Px())
       + sqr(last.Py() + newCreated.Py());
}

inline Energy2 Hadron::mT2() const {
  return mt2;
}

inline Energy Hadron::mT() const {
  return sqrt(mt2);
}


inline Energy Hadron::e() const {
  return P.e();
}

inline Energy Hadron::mass() const {  
  return theParticleMass;
}

inline Energy2 Hadron::m2() const {    
  return(theParticleMass*theParticleMass);
}

inline void  Hadron::storeMomentum(){     //  Units
  Energy2 delta = abs(P.m2() - m2() );
  if(delta > max( 0.1*GeV2, 0.002*sqr(P.e())) ) throw Veto();

  theParticle->setMomentum(P);
}

inline void Hadron::PData(tcPDPtr newPDPtr){
  Data = newPDPtr;
  if( Data ) theParticleMass =  Data->generateMass(); 
}                                                    

}









