// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the String class.
//

namespace Pythia7{

inline String::String()
  : ns(0){}

inline void String::InitXrem(){
  xPlusRem  = xRemVec(ns,1.0);
  xMinusRem = xRemVec(ns,1.0);
}

inline void String::reset(){
  Ptotrem = Ptot;

  for(int idx=0; idx!=ns; ++idx){
    xPlusRem[idx]=1.0;
    xMinusRem[idx]=1.0;
  }
}

// inline void String::sumMomentun(cPPtr firstPPtr){
//   Ptotrem = firstPPtr->momentum();

//   cPPtr next = firstPPtr;
//   while((next=next->antiColourNeighbour()) && next!=firstPPtr) 
//     Ptotrem += next->momentum();
// }


// *** Set-Get functions ***  
inline const LorentzMomentum &  String::PtotRem() const { 
  return Ptotrem;
}

inline Energy2 String::Wrem2() const {
  return Ptotrem*Ptotrem;
}
 
inline const LorentzMomentum& String::Pplus(int j) const {
  return pplus[j-1];
}

inline const LorentzMomentum& String::Pminus(int k) const {
  return pminus[k-1];
}

inline const LorentzMomentum& String::Pfwd(int fidx) const {
  return (Oriented::Dir() == Oriented::right)? 
    Pplus(fidx) :  Pminus(fidx);
}

inline const LorentzMomentum& String::Pbwd(int bidx) const {
  return (Oriented::Dir() == Oriented::right)? 
    Pminus(bidx) :  Pplus(bidx);
}

inline double String::XplusRem(int j) const {
  return xPlusRem[j-1];
}

inline double String::XminusRem(int k) const {
   return xMinusRem[k-1];
}

inline double String::Xremf(int fidx) const {
  return (Oriented::Dir() == Oriented::right)? 
    xPlusRem[fidx-1]: xMinusRem[fidx-1];
}

inline double String::Xremb(int bidx) const {
  return (Oriented::Dir() == Oriented::right)? 
    xMinusRem[bidx-1] : xPlusRem[bidx-1];
}

inline int String::nPrimaryStringRegion() const{
  return ns;
}

inline void  String:: setXplusRem(int jj, double newX){
  xPlusRem[jj-1] = newX; 
}

inline void  String:: setXminusRem(int kk, double newX){
  xMinusRem[kk-1] = newX;
}
 


// *** Updating Functions ***
inline void String::updatePtotrem(const LorentzMomentum& HadronP) {
  Ptotrem.setX(Ptotrem.x() - HadronP.x());
  Ptotrem.setY(Ptotrem.y() - HadronP.y());
  Ptotrem.setZ(Ptotrem.z() - HadronP.z());
  Ptotrem.setT(Ptotrem.e() - HadronP.e());
}

inline void  String::updateXremf(int fidx, double xfnH) {
  (Oriented::Dir() == Oriented::right)? 
    xPlusRem[fidx-1] -= xfnH :
    xMinusRem[fidx-1] -= xfnH; 
}
  
inline void  String::updateXremb(int bidx, double xbnH) {
  (Oriented::Dir() == Oriented::right)? 
    xMinusRem[bidx-1] -= xbnH :
    xPlusRem[bidx-1]  -= xbnH;
}



// *** StringRegions interfaces ***
inline cStringRegionPtr String::lastSR() {
  int last = ns;                          
  return getStringRegionPtr(last, last);
} 

inline cStringRegionPtr String::firstSR() {
  int first = 1;                          
  return getStringRegionPtr(first, first); 
} 


}//Pythia7EndNamespace





