// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the LundZGenerator class.
//

namespace Pythia7 {

inline LundZGenerator::LundZGenerator() 
  : asym(0.3), bsym(0.58/GeV2), deltaDQ(0.5), rQc(1.0) {}


inline LundZGenerator::LundZGenerator(const LundZGenerator & x)
  : ZGenerator(x), asym(x.asym), bsym(x.bsym), deltaDQ(x.deltaDQ),
    rQc(x.rQc) {}



// *** Accessors ***

inline double LundZGenerator::aSym() const {
  return asym;
}

inline InvEnergy2 LundZGenerator::bSym() const {
  return bsym;
}


inline double LundZGenerator::af() const {
  return theAf;
}

inline double LundZGenerator::bf() const {
  return bmT2;
}

inline double LundZGenerator::cf() const {
  return theCf;
}


// *** Helpers ***

inline bool LundZGenerator::smallZmax(double zm) const {
  return (zm < 0.1);
}

inline bool  LundZGenerator::largeZmax(double zm) const {  
  return ( zm > 0.85 && bmT2 > 1.0 );
}

inline bool  LundZGenerator::largeZmax(double zm, double bmt2) const {  
  return ( zm > 0.85 && bmt2 > 1.0 );
}

inline bool  LundZGenerator::cCloseToOne() const {
  return ( abs(cf()-1.0) <= 0.01 ); 
}

inline bool  LundZGenerator::cCloseToA() const {
  return ( abs(cf() - af()) < 0.01 ); 
}


inline double LundZGenerator::rQ(long hf) const{
  return rQc;
}



// *** Standard Interfaced Functions. ***
inline IBPtr LundZGenerator::clone() const {
  return new_ptr(*this);
}

inline IBPtr LundZGenerator::fullclone() const {
  return new_ptr(*this);
}

inline void LundZGenerator::doupdate() throw(UpdateException) {}

inline void LundZGenerator::doinit() throw(InitException) {}

inline void LundZGenerator::dofinish() {}



}
