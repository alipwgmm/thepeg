// -*- C++ -*-
//
// This is the implementation of the inlined member functions of
// the SpaceShowerHandler class.
//

namespace Pythia7 {

inline SpaceShowerHandler::SpaceShowerHandler()
  : theShowerModel(0), theHadronShower(2), theLeptonShower(1), theNQuarks(5),
    theAlphaSMode(2), theMaxVirtuality(0), theMEMode(1), theSoftGluonResum(1),
    theFinalCone(2), theQ2Order(0), useAngularOrdering(true), thePhiPolAsym(1),
    thePhiCoherAsym(1), theRespectScale(0), theQ0(1.0*GeV), theQ0ChgQ(1.0*GeV),
    theQ0ChgL(1.0*GeV), theAlphaSFix(0.2), theLambda5(0.18*GeV),
    theAlphaEMFix(0.0073), theEMinEmitted(2.0*GeV), theZMinEmitted(0.001),
    theXMinEmittedChg(1.0e-10), theTinyQChg(0.51*MeV), theTinyPDF(1.0e-10),
    theTinyKernelPDF(1.0e-5), theTinyKinPrec(1.0e-10), theHeavyEvol(0.8),
    theExtraPreweight(0.1), theHeavyMax(0.5), theQ2StartFrac(0.9) {}

inline SpaceShowerHandler::SpaceShowerHandler(const SpaceShowerHandler & x)
  : HandlerBase(x), theShowerModel(0), theHadronShower(x.theHadronShower),
    theLeptonShower(x.theLeptonShower), theNQuarks(x.theNQuarks),
    theAlphaSMode(x.theAlphaSMode), theMaxVirtuality(x.theMaxVirtuality),
    theMEMode(x.theMEMode), theSoftGluonResum(x.theSoftGluonResum),
    theFinalCone(x.theFinalCone), theQ2Order(x.theQ2Order),
    useAngularOrdering(x.useAngularOrdering), thePhiPolAsym(x.thePhiPolAsym),
    thePhiCoherAsym(x.thePhiCoherAsym), theRespectScale(x.theRespectScale),
    theQ0(x.theQ0), theQ0ChgQ(x.theQ0ChgQ), theQ0ChgL(x.theQ0ChgL),
    theAlphaSFix(x.theAlphaSFix), theLambda5(x.theLambda5),
    theAlphaEMFix(x.theAlphaEMFix), theEMinEmitted(x.theEMinEmitted),
    theZMinEmitted(x.theZMinEmitted), theXMinEmittedChg(x.theXMinEmittedChg),
    theTinyQChg(x.theTinyQChg), theTinyPDF(x.theTinyPDF),
    theTinyKernelPDF(x.theTinyKernelPDF), theTinyKinPrec(x.theTinyKinPrec),
    theHeavyEvol(x.theHeavyEvol), theExtraPreweight(x.theExtraPreweight),
    theHeavyMax(x.theHeavyMax), theQ2StartFrac(x.theQ2StartFrac) {}

inline IBPtr SpaceShowerHandler::clone() const {
  return new_ptr(*this);
}

inline IBPtr SpaceShowerHandler::fullclone() const {
  return new_ptr(*this);
}

inline void SpaceShowerHandler::doupdate() throw(UpdateException) {
  HandlerBase::doupdate();
  // First update base class.
  bool redo = touched();
  // redo if touched.
//  UpdateChecker::check(aDependentMember, redo);
  // Update referenced objects on which this depends redo is set to true
  // if the dependent object is touched.
//  for_each(ContainerOfDependencies, UpdateChecker(redo));
  // Update a container of references.
//  for_each(MapOfDependencies, UpdateMapChecker(redo));
  // Update a map of references.
  if ( !redo ) return;
  // return if nothing has been touched. Otherwise do the actual update.
//  touch()
  // Touch if anything has changed.
}

inline void SpaceShowerHandler::doinit() throw(InitException) {
  HandlerBase::doinit();
}

inline void SpaceShowerHandler::dofinish() {
  HandlerBase::dofinish();
}

inline void SpaceShowerHandler::doinitrun() {
  HandlerBase::doinitrun();
}

inline void SpaceShowerHandler::rebind(const TranslationMap & trans)
  throw(RebindException) {
  // dummy = trans.translate(dummy);
  HandlerBase::rebind(trans);
}

inline IVector SpaceShowerHandler::getReferences() {
  IVector ret = HandlerBase::getReferences();
  // ret.push_back(dummy);
  return ret;
}

inline int SpaceShowerHandler::hadronShower() const {
  return theHadronShower;
}

inline int SpaceShowerHandler::leptonShower() const {
  return theLeptonShower;
}

inline int SpaceShowerHandler::nQuarks() const {
  return theNQuarks;
}

inline int SpaceShowerHandler::alphaSMode() const {
  return theAlphaSMode;
}

inline int SpaceShowerHandler::maxVirtuality() const {
  return theMaxVirtuality;
}

inline int SpaceShowerHandler::MEMode() const {
  return theMEMode;
}

inline int SpaceShowerHandler::softGluonResum() const {
  return theSoftGluonResum;
}

inline int SpaceShowerHandler::finalCone() const {
  return theFinalCone;
}

inline int SpaceShowerHandler::Q2Order() const {
  return theQ2Order;
}

inline bool SpaceShowerHandler::angularOrdering() const {
  return useAngularOrdering;
}

inline int SpaceShowerHandler::phiPolAsym() const {
  return thePhiPolAsym;
}

inline int SpaceShowerHandler::phiCoherAsym() const {
  return thePhiCoherAsym;
}

inline int SpaceShowerHandler::respectScale() const {
  return theRespectScale;
}

inline Energy SpaceShowerHandler::Q0() const {
  return theQ0;
}

inline Energy SpaceShowerHandler::Q0ChgQ() const {
  return theQ0ChgQ;
}

inline Energy SpaceShowerHandler::Q0ChgL() const {
  return theQ0ChgL;
}

inline double SpaceShowerHandler::alphaSFix() const {
  return theAlphaSFix;
}

inline Energy SpaceShowerHandler::Lambda5() const {
  return theLambda5;
}

inline double SpaceShowerHandler::alphaEMFix() const {
  return theAlphaEMFix;
}

inline Energy SpaceShowerHandler::EMinEmitted() const {
  return theEMinEmitted;
}

inline double SpaceShowerHandler::zMinEmitted() const {
  return theZMinEmitted;
}

inline double SpaceShowerHandler::xMinEmittedChg() const {
  return theXMinEmittedChg;
}

inline Energy SpaceShowerHandler::tinyQChg() const {
  return theTinyQChg;
}

inline double SpaceShowerHandler::tinyPDF() const {
  return theTinyPDF;
}

inline double SpaceShowerHandler::tinyKernelPDF() const {
  return theTinyKernelPDF;
}

inline double SpaceShowerHandler::tinyKinPrec() const {
  return theTinyKinPrec;
}

inline double SpaceShowerHandler::heavyEvol() const {
  return theHeavyEvol;
}

inline double SpaceShowerHandler::extraPreweight() const {
  return theExtraPreweight;
}

inline double SpaceShowerHandler::heavyMax() const {
  return theHeavyMax;
}

inline double SpaceShowerHandler::Q2StartFrac() const {
  return theQ2StartFrac;
}

}
